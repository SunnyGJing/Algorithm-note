"""
Creat time:2020-1-13下午~晚上
TimeToCode：
Last modified time: 

692.最频繁的k个单词

给定一个非空的单词数组，找出最频繁出现的k个单词，频次的单词按字母顺序较低的为先。
注意：最后输出要按单词频次从高到低(单词字母顺序从低到高)排列

Example 1:
Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
Example 2:
Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.

"""


class Solution:

    # 本题是经典题型“数组最大的k个数”的升级版本
    # 由“求数值最大”变成为“求出现次数最大，次数相同时取字母顺序较小的”

    # 思路：
    # 本题和347.k个最频繁的元素如出一辙
    # 不同的是：347题的要求是次数最大，本题的要求是次数最大，次数相同的按字母顺序最小
    # 所以只需要再347的代码基础上，更改1.建堆的条件 2.返回时的次序
    
    # 用哈希表记录元素出现的次数，并用哈希表前k个元素建立小顶堆，用其余的
    # 次数较大的元素(次数相同的要字母顺序较小的)替换堆顶元素，最后返回堆中的k个元素(按次数大到小排列)

    
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        # 记录元素出现的次数
        hasht = {}
        # 记录数组中不同元素的个数
        count = 0
        for word in words:
            hasht[word] = hasht.get(word, 0) + 1
        for key in hasht.keys():
            words[count] = key
            count += 1
        if count < k:
            return 0;

        # 用哈希表中前k个元素建立小顶堆
        for i in range(int(k/2-1), -1, -1):
            self.minHeapAdjust(words, hasht, i, k-1)
        # 将哈希表剩下count-k个元素中较大值(值相同的要字母顺序较小的)插入并调整小顶堆
        for i in range(k, count):
            if hasht[words[i]] > hasht[words[0]] or (hasht[words[i]]==hasht[words[0]] and words[i] < words[0]):
                words[i], words[0] = words[0], words[i]
                self.minHeapAdjust(words, hasht, 0, k-1)
        # 此时，堆中存储了最频繁的k个元素，但没有按出现次数排列
        result = sorted(words[:k], key=lambda e:(-hasht[e], e))
        return result
    
    def minHeapAdjust(self, words, hasht, start, end):
        child = start * 2 + 1
        while child <= end:
            # 次数较大的元素(次数相同的要字母顺序较小的)替换当前元素
            if child + 1 <= end and (hasht[words[child+1]] < hasht[words[child]] or (hasht[words[child+1]]==hasht[words[child]] and words[child+1] > words[child])):
                child += 1
            if hasht[words[start]] < hasht[words[child]] or (hasht[words[start]] == hasht[words[child]] and words[start] > words[child]):
                break
            words[start], words[child] = words[child], words[start]
            start = child
            child = child * 2 + 1
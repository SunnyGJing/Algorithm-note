"""
Creat time:2020-2-13下午
TimeToCode：
Last modified time:

360.函数变换后的数组排序

给定一个有序整数数组和三个整数a,b,c，对每个数组元素进行函数变换：f(x) = ax^2 + bx + c
PS:返回的数组必须是有序的，时间复杂度为O(n)

Example 1:
    Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
    Output: [3,9,15,33]
Example 2:
    Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
    Output: [-23,-5,1,7]

"""


class Solution:

    # 我原本的思路是错误的！！！
    # 错误思路如下：
    # 我原本觉得如果驻点t在数组的数值范围之外，将影响单调性的判断
    # 所以在代码中加入了nums[0] <= nums[t] <= nums[-1]的条件判断
    # 但是其实这是没有必要的

    # 在《blog》中看到了更好的解决方法
    # 思路如下：
    # 因为是一元二次方程(抛物线)，根据抛物线的性质进行考虑
    # 有几种情况：
    # 1.是凹函数(a>0)：最大值一定在数组两端，从数组两端向内进行遍历，较大函数值添加到数组尾部
    # 2.是凸函数(a<0)：最小值一定在数组两端，从数组两端向内进行遍历，较小函数值添加到数组头部
    # 3.单调递增(a=0&&f(x)<f(x+1))：数组起点的函数值最小，从数组起点开始计算函数值并添加至数组头部
    # 4.单调递减(a=0&&f(x)>f(x+1))：数组终点的函数值最小，从数组终点开始计算函数值并添加至数组头部
    # 但这四种情况在编程时可以归为两种情况：
    # 1.a>0，较大的添加至数组尾部
    # 2.a<=0，较小的添加至数组头部

    def sortTransformedArray(self, nums, a, b, c):
        n = len(nums)
        result = [0] * n
        
        cur = n-1 if a > 0 else 0
        low, high = 0, n-1
        while low <= high:
            f_low, f_high = self.f(low), self.f(high)
            if a > 0:
                if f_low > f_high:
                    result[cur] = f_low
                    low += 1
                else:
                    result[cur] = f_high
                    high -= 1
                cur -= 1
            else:
                if f_low < f_high:
                    result[cur] = f_low
                    low += 1
                else:
                    result[cur] = f_high
                    high -= 1
                cur += 1
        
        return result

        
    def f(self, x, a, b, c):
        return a * x * x + b * x + c

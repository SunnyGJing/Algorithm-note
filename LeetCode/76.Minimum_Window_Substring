"""
Creat time:2020-2-5下午
TimeToCode：
Last modified time:

76.查找两个字符串的最短覆盖子串窗口

给定两个字符串s和t，找出s中符合条件的最短子串：包含t中所有字母

Example:
    Input: S = "ADOBECODEBANC", T = "ABC"
    Output: "BANC"

"""

class Solution:

    # 本题是“438.查找两个字符串的同字母异位词”的升级题目，
    # 不同的地方在于窗口中的元素，438中窗口只包含字符串t的字母元素，76中窗口包含除字符串t之外的字母
    # 下面记录《leetcode》中非常好的解法：
    # 与438题解法不同在于：本题的hasht包含除字符串t之外的字母键值，并且字典值含有负值

    # 思路如下：
    # 用哈希表hahst记录字符串t中每个元素的频次
    # 用两个指针start和end分别指向滑动窗口的开头和结尾
    # 用count记录当前在字符串s中找到符合条件的字母个数(即同样存在于t中)
    # 用min_start和min_end记录当前已找到符合条件的最短子字符串

    # 具体做法：
    # 向后移动end，哈希表中当前字母的计数减一(允许负值)，当符合条件时(end指向的元素存在于p中)，count加一。
    # 如果count==len(p)（说明找到了符合条件的子串），根据长度决定是否更新为最短子串，
    # 并且向后移动start，哈希表中当前字母的奇数加一，（直到当前子串不再符合条件），
    # 当符合条件时(end指向的元素存在于p中)，cout减一。
    # 最终，返回最短子串


    def minWindow(self, s: str, t: str) -> str:
        len_s, len_t = len(s), len(t)
        if not s or not t or len_t > len_s: return ""

        hasht = collections.Counter(t)
        start, end, count, min_start, min_end = 0, 0, 0, 0, len_s+1

        while end < len_s:
            if hasht.get(s[end], 0) > 0:
                count += 1
            hasht[s[end]] = hasht.get(s[end],0) - 1
            end += 1
            
            while count == len_t:
                if end-start < min_end - min_start:
                    min_start = start
                    min_end = end
                hasht[s[start]] += 1
                if hasht.get(s[start], 0) > 0:
                    count -= 1
                start += 1
                
        print(min_start, min_end)
        return s[min_start:min_end] if min_end - min_start <= len_s else ""
"""
Creat time:2020-2-5下午
TimeToCode：
Last modified time:

992.查找含有k个不同整数的子串

给定一个正整数数组，找出所有符合条件的子数组：含有k个不同的数字，返回子数组的个数
PS：允许某个数字重复出现
注意：是子数组，不是子序列

Example 1:
    Input: A = [1,2,1,2,3], K = 2
    Output: 7
    Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].

Example 2:
    Input: A = [1,2,1,3,4], K = 3
    Output: 3
    Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

"""

class Solution:

    # 《leetcode》给出了解此类题的模板
    # 看到“k个不同字母元素”的子串，就想到下面的解法：

    # 思路如下：
    # 在“340.含有至多k个不同字母的最长子串”题目中，我们求出了含有至多k个不同字母的子串
    # 本题求含有k个不同字母的子串的个数，可以直接调用340中的函数
    # 因为满足“k个”的个数就是满足“至多k个”的个数减去满足“至多k-1个”的个数


    def subarraysWithKDistinct(self, A: List[int], K: int) -> int:
        return self.subarraysWithAtMostKDistinct(A, K) - self.subarraysWithAtMostKDistinct(A, K-1)
    
    def subarraysWithAtMostKDistinct(self, num, k):
        size = len(num)
        if k<0 or k>size or size==0: return 0

        hasht = collections.defaultdict(int)
        start, end, counter, result = 0, 0, 0, 0

        while end < size:
            hasht[num[end]] += 1
            if hasht[num[end]] == 1:
                counter += 1
            end += 1
            while start < end and counter > k:
                hasht[num[start]] -= 1
                if hasht[num[start]] == 0:
                    counter -= 1
                start += 1
            result += end - start
        
        return result


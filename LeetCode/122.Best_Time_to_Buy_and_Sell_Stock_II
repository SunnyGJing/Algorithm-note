"""
Creat time:2020-1-30下午
TimeToCode：
Last modified time: 

122.买卖的最佳时期_Ⅱ

给定一个数组，记录了第i天的价格，请计算出买卖的最大收益。
PS: 可以多次买卖，但不能时间重叠

示例：
Example 1:
Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.

Example 2:
Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.

Example 3:
Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

"""


class Solution:

    # 滑动窗口问题，既然是求“最大”收益，想到了用“单调队列”方法

    # 思路：
    # 遍历，把当前元素看作卖出价格，向前找第一个比它低的价格，进行买卖交易
    # 在这个过程中，需要两个临时变量，一个是用来存储下标的单调递增队列dq，另一个是记录第i天买入的最大收益max_benefit[i]
    # 在遍历过程中，从dq中弹出比当日价格更高的日子的下标
    # 遍历结束后，max_benefit数组存储了每一天如果买入未来的最大收益，所以按项累加就是最终的结果。

    # PS: 本题等同于“寻找所有的递增子序列，再找出满足条件的最优的子序列(本题是左右端点差值最大)”

    def maxProfit(self, prices: List[int]) -> int:
        if not prices: return 0

        dq = collections.deque()
        max_benefit = [0] * len(prices)

        for i in range(len(prices)):
            while len(dq) and prices[i] <= prices[dq[-1]]: dq.pop()
            if len(dq): max_benefit[dq[-1]] = max(max_benefit[dq[-1]], prices[i]-prices[dq[-1]])
            dq.append(i)
        
        return sum(max_benefit)
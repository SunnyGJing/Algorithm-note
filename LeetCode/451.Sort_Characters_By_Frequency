"""
Creat time:2020-1-13晚上
TimeToCode：
Last modified time: 

451.按出现频次为字母排序

给定一个字符串，按字母的频次以降序排序。
注意：最后输出没有单词顺序的要求，但相同的字母必须在一起。

Example 1:
Input:
"tree"
Output:
"eert"
Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:
Input:
"cccaaa"
Output:
"cccaaa"
Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:
Input:
"Aabb"
Output:
"bbAa"
Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

"""


class Solution_1:

    # 这道题比较简单，有两种解法：
    # 用哈希表记录字母出现的频次
    # 1.用python的sort函数为字符串排序，key为(频次，字母顺序)
    # 2.用堆排序为字符串排序，排序规则为频次较大以及字母顺序
    # 3.桶排序

    # 考虑到解法1和解法2的时间复杂度相同O(nlogn)，只写第一种，第一种实现起来简单
    # 解法3，详见Solution_2

    def frequencySort(self, s):
        if not s:
            return ""
        
        hasht = dict()
        for item in s:
            hasht[item] = hasht.get(item, 0) + 1
        
        result = sorted(s, key=lambda x:(-hasht[x], x))

        return "".join(result)
        


class Solution_2:

    # 普通排序O(nlogn)能解决的问题，一定可以优化为用桶排序解决
    # 桶排序的时间复杂度很好O(n), 但空间复杂度很高，尤其是字符串的长度n很大的时候

    # 思路：
    # 建立n个桶，第i个桶存放频次为i的单词
    # 从后往前依次遍历桶，把当前桶中的单词添加到结果中
    # 将结果转化为字符串并返回

    def frequencySort(self, s):
        if not s:
            return ""
        
        hasht = {}
        for item in s:
            hasht[item] = hasht.get(item, 0) + 1
        
        bucket = [[] for i in range(len(s))]
        
        for (item, count) in hasht.items():
            bucket[count-1].append(item)

        result = []
        for i in range(len(s)-1, -1, -1):
            if len(bucket[i]) > 0:
                result += [item for item in bucket[i] for j in range(hasht[item])]
        
        return "".join(result)

"""
Creat time:2020-2-12下午
TimeToCode：
Last modified time:

26.删除有序数组的重复元素

给定一个有序数组，删除重复元素(原地修改)，并返回新数组的长度
PS: 不能使用额外的存储空间

拓展：
    Google | 删除无序数组的重复元素
    - can't use Set
    - array is not sorted
    - must be done in-place

Example 1:
    Input: [1,1,2],
    Output: 2
Example 2:
    Input: [0,0,1,1,1,2,2,3,3,4],
    Output: 5

"""

class Solution_1:

    # 非常简单
    # 比较特别的是：本题不仅仅要求输出修改后的新数组长度，还会检查原数组是不是真的被正确的修改了
    
    # 对应的解决思路是：“有序数组的多指针”
    
    # 做法如下：
    # 指针a指向当前等待放入新元素的位置下标
    # 指针b指向当前等待判断的位置下标
    # 如果a指向-1或者a元素不等于b元素，说明b指向的元素不是要删除的元素，那么b元素赋值给a位置
    # 如果a元素等于b元素，说明b指向的元素是要删除的元素，那么b指针向后查找
    # 查找结束后，a指向了最后一个不重复的元素，新数组的长度就是a+1


    def removeDuplicates(self, nums: List[int]) -> int:
        n = len(nums)
        
        a, b = -1, 0
        while b < n:
            if a < 0 or nums[a] != nums[b]:
                a += 1
                nums[a] = nums[b]
            while b < n and nums[a] == nums[b]:
                b += 1
        
        return a + 1




class Solution_2:

    # 下面是《leetcode》中简单易懂的代码
    # 和solution1的思路是大致一样的，但是代码的拓展能力更强
    # 比如说本代码可以完全适用于“80.删除有序数组的重复元素_Ⅱ”

    # 思路如下：
    # 方法是“有序数组多指针”
    # 指针a指向存储目标元素的位置下标，指针b指向当前遍历判断的元素
    # 如果a特别小或者b指向的元素和a-1指向的元素不相等，就将b元素赋值给a元素
    # 这里的“a-1”可以拓展为“a-i”，其中i是允许的重复元素个数，本题要求i=1


    def removeDuplicates(self, nums: List[int]) -> int:
        a = 0
        for b in range(len(nums)):
            if a < 1 or nums[b] != nums[a-1]:
                nums[a] = nums[b]
                a += 1
        return a



拓展解法：
Some approaches:
    - Sorting array and check pairs; O(NlogN) time, O(1) space
    - Using hash-set or hash-map; O(N) time, O(N) space
    - If there are only one duplicate and numbers [0 <= x < n], you will use XOR 
        operation to find duplicate; otherwise if numbers around [1 <= x < n] use 
        Cycle detection approach; O(N) time O(1) space.
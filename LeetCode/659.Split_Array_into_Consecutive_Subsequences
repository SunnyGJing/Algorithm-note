"""
Creat time:2020-1-14上午
TimeToCode：
Last modified time: 

659.将有序数组拆为数值连续的子序列(长度>=3)

给定一个非降序的整数数组，判断能不能拆分为至少一个长度>=3的连续整数子序列。

Example 1:
    Input: [1,2,3,3,4,5]
    Output: True
    Explanation:
    You can split them into two consecutive subsequences : 
    1, 2, 3
    3, 4, 5

Example 2:
    Input: [1,2,3,3,4,4,5,5]
    Output: True
    Explanation:
    You can split them into two consecutive subsequences : 
    1, 2, 3, 4, 5
    3, 4, 5

Example 3:
    Input: [1,2,3,4,4,5]
    Output: False

"""


class Solution_1:
    
    # 《leetcode》中一个很好的解答：
    # 思路：
    # 用哈希表记录数组元素出现的次数。再遍历数组，记当前元素为num，
    # 如果存在以num-1为终点的子序列或者哈希表中num+1、num+2的值>=1，就添加到子序列列表
    # 否则，返回False
    # 如果完整遍历完数组，没有不符合条件的元素，就返回True

    # 这个方法很巧妙，是计数版本的贪心算法
    # 可以拓展应用到以下题型：
    # 题目特点1.是非连续的滑动窗口题型
    # 题目特点2.每一个格子既可以作为窗口的起点也可以作为窗口的终点
    # 题目特点3.当前格子附加至已有的窗口比从新创建窗口更好

    def isPossible(self, nums: List[int]) -> bool:
        left = collections.Counter(nums)
        end = collections.Counter()

        for num in nums:
            if not left[num]: 
                # 已经和前面的数字num-1组成子序列，跳过就好了
                continue

            left[num] -= 1

            if end[num-1]:
                # 可以附加到已有的子序列中
                end[num-1] -= 1
                end[num] += 1
            elif left[num+1] and left[num+2]:
                # 可以组成新的子序列
                end[num+2] += 1
                left[num+1] -= 1
                left[num+2] -= 1
            else:
                # 不符合条件
                return False
        
        return True



class Solution_2:

    # 《leetcode》中一个很好的解答：
    # 建立哈希表，记录每个元素可以作为子序列的第i个元素
    # 所以哈希表的key值是数组的元素值，而哈希表的value值是一个list，list里存储了该元素可作为多个子序列中的第i位元素
    
    # 做法如下：
    # 使用collections模块的defaultdict方法，建立一个以list为value的哈希表。
    # 遍历数组元素，
    # 如果前一个元素的哈希表为空，说明当前元素是分割后子序列的首个元素，记位数为1。
    # 如果前一个元素的哈希表不为空，说明当前元素不是子序列的首个元素，记位数为pre_small+1。
    # 同时，要将找到的前一个元素的最小位数删除
    #（因为该位数已经不是子序列的末尾位数了，哈希表中只存储等待后接其它元素的位数）
    # 遍历结束后，
    # 遍历哈希表的value，如果没有<3的位数，就说明所有的子序列的长度>=3。


    def isPossible(self, nums: List[int]) -> bool:
        hasht = collections.defaultdict(list)

        for num in nums:
            pre_small = 0
            if len(hasht[num-1]) > 0:
                pre_small = min(hasht[num-1])
                hasht[num-1].remove(pre_small)
            hasht[num].append(pre_small + 1)
            
        for values in hasht.values():
            for v in values:
                if v < 3:
                    return False

        return True
"""
Creat time:2020-2-4下午
TimeToCode：
Last modified time: 

438.查找两个字符串的同字母异位词

给定一个字符串s和一个非空字符串p，找出所有p在s中的同字母异位词，返回起始下标
PS:输出顺序无关，输入只含小写字母

Example 1:
    Input: s: "cbaebabacd" p: "abc"
    Output: [0, 6]
    Explanation:
    The substring with start index = 0 is "cba", which is an anagram of "abc".
    The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:
    Input: s: "abab" p: "ab"
    Output: [0, 1, 2]
    Explanation:
    The substring with start index = 0 is "ab", which is an anagram of "ab".
    The substring with start index = 1 is "ba", which is an anagram of "ab".
    The substring with start index = 2 is "ab", which is an anagram of "ab".

"""

class Solution:

    # 《leetcode》中非常赞的解法：
    # 本题为“滑动窗口”问题，用“双指针”来解决

    # 思路如下：
    # 用哈希表hahst记录字符串p中每个元素的频次
    # 用两个指针start和end分别指向滑动窗口的开头和结尾
    # 用count记录当前在字符串s中找到符合条件的字母个数(即同样存在于p中)

    # 具体做法：
    # 当符合条件时(end指向的元素存在于p中)，向后移动end，hasht中待查找的元素减少一个
    # 当不符合条件时(end指向的元素不存在于p中)，向后移动start，hasht中待查找的元素增加一个
    # 直到count==len(p)时，记录当前滑动窗口的起点start


    def findAnagrams(self, s: str, p: str) -> List[int]:
        len_s, len_p = len(s), len(p)
        if not s or not p or len_p > len_s: return []

        hasht = collections.Counter(p)
        start, end, count = 0, 0, 0
        result = []

        while end < len_s:
            if hasht.get(s[end], 0) > 0:
                hasht[s[end]] -= 1
                end += 1
                count += 1
            else:
                hasht[s[start]] += 1
                start += 1
                count -= 1
            
            if count == len_p:
                result.append(start)
            
        return result
"""
Creat time:2020-2-13下午
TimeToCode：
Last modified time:

259.寻找小于目标值的三数之和

给定一个含n个整数的数组和一个整数target，计算符合条件的组合个数：nums[a] + nums[b] + nums[c] < target.

Example：
    Input：nums = [-2, 0, 1, 3], and target = 2.
    Output：2
    Because there are two triplets which sums are less than 2:
        [-2, 0, 1]
        [-2, 0, 3]

"""


class Solution:

    # 本题和“15.寻找等于零的三数之和”,"16.寻找最接近目标值的三数之和"非常相似
    # 要找出符合条件的三个数，直观思路是用“有序数组的多指针”方法
    # 由于输入数组是无序的，所以先对其进行排序
    
    # 思路如下：
    # 用三个指针a,b,c记录目标数字
    # 用result记录符合条件的三数组合的个数
    # 先用指针a遍历排序后的数组，设b=a+1,c=n-1，移动b和c寻找小于target的三数之和
    
    # 具体做法如下：
    # 如果当前三数之和<target，即b~c的范围内有(b-c)组满足条件的组合，所以就result+=(c-b), 向后移动b
    # 如果当前三数之和>=target，就向前移动c
    

    def threeSumSmaller(self, nums, target):
        n = len(nums)
        if n < 3: return 0

        result = 0
        for a in range(n-2):
            b, c = a + 1, n - 1
            sum_v = nums[a] + nums[b] + nums[c]
            if sum_v < target:
                result += c - b
                b += 1
            else:
                c -= 1
        
        return result
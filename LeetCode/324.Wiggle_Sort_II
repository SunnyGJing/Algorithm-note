"""
Creat time:2020-1-18下午
TimeToCode：
Last modified time: 

324.摆动排序Ⅱ

给定一个无序数组，按如下规则排序：nums[0] < nums[1] > nums[2] < nums[3]....
注意：本题无须输出，改动原数组即可

Example 1:
Input: nums = [1, 5, 1, 1, 6, 4]
Output: One possible answer is [1, 4, 1, 5, 1, 6].


Example 2:
Input: nums = [1, 3, 2, 2, 3, 1]
Output: One possible answer is [2, 3, 1, 3, 1, 2].

挑战：
时间复杂度O(n) 空间复杂度O(1)

"""

class Solution_1:

    # 直观思路是：
    # 先为数组排序
    # 将较小的一半放在偶数索引上，较大的一半放在奇数索引上

    # 但时间复杂度是O(nlogn)，空间复杂度是O(1)，不是最优的

    def wiggleSort(self, nums: List[int]) -> None:
        
        nums.sort()
        half = len(nums[::2])
        nums[::2], nums[1::2] = nums[half-1::-1], nums[:half-1:-1]




class Solution_2:

    # solution1对数组进行了排序，而本题只需要找到中位数即可，无需完全排序
    # 思路：记第len/2大的元素为M，先找到M
    # 比M大的元素放在奇数下标上，比M小的元素放在偶数下标上

    # 具体做法：
    # 使用随即快排算法的子函数，找到数组的中位数，平均复杂度为O(n)
    # 再根据与中位数的比较结果摆放各元素

    def wiggleSort(self, nums: List[int]) -> None:
        
        mid = self.nthElement(nums, (len(nums)+1)//2)
        
        half = (len(nums)+1)//2
        nums[::2], nums[1::2] = nums[half-1::-1], nums[:half-1:-1]


    def nthElement(self, nums, n):
            start,end=0,len(nums)-1
            while True:
                pivot=nums[random.randint(start,end)]
                i,j,k=start,end,start
                while k<=j:
                    if nums[k]<pivot:
                        nums[i],nums[k]=nums[k],nums[i]
                        i+=1
                        k+=1
                    elif nums[k]>pivot:
                        nums[j],nums[k]=nums[k],nums[j]
                        j-=1
                    else:
                        k+=1
                if i<=n-1<=j:
                    return pivot
                elif n-1<i:
                    end=i-1
                else:
                    start=i+1

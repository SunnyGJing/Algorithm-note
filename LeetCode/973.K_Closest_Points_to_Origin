"""
Creat time:2020-1-18下午
TimeToCode：
Last modified time: 

973.平面上离原点最近的k个点

给定一个平面点坐标数组和一个数字k，找出离原点(0,0)最近的k个点。输出可以无序

Example 1:
Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].

Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)

"""

class Solution:

    # 本题是经典题型“数组中第k大的数”的修改版本，由"数值初始大小"排列改成了由"数值计算结果"排序
    # 所以只需要新建一个字典，记录"数值初始大小"到"数值计算结果"的映射即可

    # 思路如下：
    # 新建字典distance，建立大小为k的大顶堆

    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        if not points or k<0 or k>len(points):
            return []
        
        distance = {}
        for point in points:
            distance[tuple(point)] = (pow(point[0],2)+pow(point[1],2)) ** 0.5
            
        
        for i in range(int(k/2)-1,-1,-1):
            self.maxHeapAdjust(points, distance, i, k-1)
        for i in range(k, len(points)):
            if distance[tuple(points[i])] < distance[tuple(points[0])]:
                points[i], points[0] = points[0], points[i]
                self.maxHeapAdjust(points, distance, 0, k-1)
        return points[:k]
    
    def maxHeapAdjust(self, points, distance, start, end):
        child = start * 2 + 1
        while child <= end:
            if child+1<=end and distance[tuple(points[child+1])]>distance[tuple(points[child])]:
                child += 1
            if distance[tuple(points[child])] <= distance[tuple(points[start])]:
                break
            points[start], points[child] = points[child], points[start]
            start = child
            child = start*2+1
            
        
"""
Creat time: 2019-08-13 10：05
Last modified time: 

输入两棵二叉树A和B，判断B是不是A的子结构 （约定：空树不是任意一个树的子结构）

解法1：用栈实现广度优先
解法2：用队列实现深度优先
"""

struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) { }
};

class Solution_1 {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2) {
        if(!pRoot1 || !pRoot2) return false;
        stack<TreeNode*> s;
        s.push(pRoot1);
        while(!s.empty()) {
            TreeNode* p = s.top();
            s.pop();
            if(p->val==pRoot2->val && AllElement(p, pRoot2)==true)
                return true;
            if(p->left) s.push(p->left);
            if(p->right) s.push(p->right);
        }
        return false;
    }

    bool AllElement(TreeNode* p1, TreeNode* p2) {
        if(!p2) return true;
        if(!p1) return false;
        if(p1->val == p2->val)
            return AllElement(p1->left, p2->left) && AllElement(p1->right, p2->right);
        return false;
    }
};

class Solution_2 {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2) {
        if(!pRoot1 || !pRoot2) return false;
        return AllElement(pRoot1, pRoot2) ||
            AllElement(pRoot1->left, pRoot2) ||
            AllElement(pRoot1->right, pRoot2);
    }

    bool AllElement(TreeNode* p1, TreeNode* p2) {
        if(!p2) return true;
        if(!p1) return false;
        if(p1->val == p2->val)
            return AllElement(p1->left, p2->left) && AllElement(p1->right, p2->right);
        return false;
    }
};
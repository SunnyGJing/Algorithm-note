"""
Creat time: 2019-09-24 10：59
TimeToCode： 34min
Last modified time: 

从上到下，从左到右，再从右到左，再从左到右，...。之字形按行打印二叉树。

特别要注意左右孩子结点的入栈顺序（先入栈的最后被遍历）
下一层要从左至右时，则先左孩子入栈；
下一层要从右至左时，则先右孩子入栈。
"""

/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/

class Solution {
public:
    vector<vector<int> > Print(TreeNode* pRoot) {
        vector<vector<int> > result;
        if(!pRoot) return result;

        stack<TreeNode*> q1;
        stack<TreeNode*> q2;
        q1.push(pRoot);

        while(!q1.empty() || !q2.empty()) {
            if(!q1.empty()) {
                vector<int> current1;
                while(!q1.empty()) {
                    TreeNode *pNode = q1.top();
                    q1.pop();
                    current1.push_back(pNode->val);
                    if(pNode->left != NULL)
                        q2.push(pNode->left);
                    if(pNode->right != NULL)
                        q2.push(pNode->right);
                }
                result.push_back(current1);
            }
            if(!q2.empty()) {
                vector<int> current2;
                while(!q2.empty()) {
                    TreeNode *pNode = q2.top();
                    q2.pop();
                    current2.push_back(pNode->val);
                    if(pNode->right != NULL)
                        q1.push(pNode->right);
                    if(pNode->left != NULL)
                        q1.push(pNode->left);
                }
                result.push_back(current2);
            }
        }

        return result;
    }
};
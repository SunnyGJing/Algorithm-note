"""
Creat time: 2019-12-28上午~下午
TimeToCode：
Last modified time: 

给定一个数组和滑动窗口的大小，找出数组在每一个滑动窗口里的最大值

"""

class Solution_1 {
    // 计算滑动窗口的最大值，无需每次都遍历每一个元素，可以利用前一个滑动窗口的最大值
    // 思路：
    // 记上一个滑动窗口的起始值为preStart，记上一个滑动窗口里的最大值为preMax，
    // 如果preStart等于preMax，就不能简便计算了，需要遍历每一个元素
    // 如果preStart不等于preMax，当前滑动窗口里的最大值等于max(preMax, 末尾元素)

public:
    vector<int> maxInWindows(const vector<int>& num, unsigned int size) {
        if(num.empty() || size<=0) return vector<int>();

        vector<int> result;

        int length = num.size();
        int valueMax = INT_MIN;
        int curStart = 0;
        while(curStart + size <= length) {
            if(curStart == 0 || valueMax == num[curStart-1]) {
                valueMax = INT_MIN;
                for(int i=curStart; i<curStart+size; ++i)
                    valueMax = max(valueMax, num[i]);
                result.push_back(valueMax);
            }
            else {
                valueMax = max(valueMax, num[curStart+size-1]);
                result.push_back(valueMax);
            }

            ++curStart;
        }

        return result;
    }
};



class Solution_2 {
    // 《剑指offer》中的解法思路不同，时间复杂度也更优，记录一下
    // 思路：
    // 由于滑动窗口的前出后进的特性，考虑用队列实现
    // 在做过的题目30和9中，可以在O(1)时间获取栈的最大值，可以用两个栈实现队列
    // 所以要用队列在O(n)时间实现获取所有滑动窗口的最值，是可行的
    // 做法：
    // 实现一个两端都可以出的队列，也就是c++中的双端队列deque
    // 如果新加入的元素大于队列中所有的元素，则先全部出队，后入队
    // 如果信加入的元素小于队首元素但大于部分元素，则先部分出队，后入队
    // 如果新加入的元素小于队列中的元素，则先入队
    // 使得队列的头部的元素总是最大的
    // 每个队列的头部元素就是当前滑动窗口在数组中最大的元素

    // PS:C++的deque的命令如下：
    // 从队头入队 push_front(); 从队尾入队 push_back();
    // 从对头出队 pop_front(); 从队尾出队 pop_back();
    
    // PS: deque中存储的是数组下标

public:
    vector<int> maxInWindows(const vector<int>& num, unsigned int size) {
        if(num.size()<size || size<=0) return vector<int>();

        vector<int> result;
        deque<int> dq;

        for(unsigned int i=0; i<num.size(); ++i) {
            while(dq.size() && num[dq.back()]<=num[i])
                dq.pop_back();
            while(dq.size() && i-dq.front()>=size)
                dq.pop_front();
            dq.push_back(i);
            if(i >= size-1)
                result.push_back(num[dq.front()]);
        }
    
        return result;
    }
};
"""
Creat time: 2019-12-19晚上 ~ 2019-12-20早上
TimeToCode：
Last modified time: 

给定序列化的数字序列“01234567891011121314……”，写一个函数，求任意第n位的数字。
例如，第5位是5，第13位是1，第19位是4.

"""

// 给定任意数字n
// n∈[0,9]，则原数 = n；
// n∈[10,99]，
// 则原数 = (n-9-十分位数index)/2+preMaxNum；
// 其中，n - 9是求出原数在当前区间的位数。
// 十分位数index，是(原数-9)%bits。例如，十位的index是0，个位的index是1；
// (n-9-十分位数index)/2是
// preMaxNum是上个区间最大的数字，也就是9；
// 个位的位数=9+(原数-9)*2; 十位的位数=8+(原数-9)*2。


// 例如，34524
// 0-9，9位；10-99，90*2；100-999，900*3；1000-9999，9000*4；
// 10000-34524；(原数-9999)
class Solution {
public:
    int digitAtIndex(int count) {
        if(n<=0) return -1;
        
        // 从区间[0,9]开始，迭代求得原数是几位数bits
        // 以及球的原数在所属的区间中是第几个数字count
        int bits = 1;
        while(count > 9*(10^(bits-1))*bits) {
            count -= 9*(10^(bits-1))*bits;
            ++bits;
        }

        // index记录第count位数字是原数的第几位
        // 以325为例，第0位是3、第2位是5
        // preMaxNum是上个区间最大的数字
        // 最终求得原数num
        int index = count % bits;
        int preMaxNum = 10^(bits-1)-1;
        int num = (count-index)/bits + preMaxNum;
        string str = to_string(num);

        // 返回原数的第index位数值
        return str[index];
    }
}
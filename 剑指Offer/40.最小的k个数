"""
Creat time:
TimeToCode：
Last modified time: 

给定n个整数，找出最小的k个数。

solution1：快排
solution2：堆排序 《剑指offer》这个解法应该学习！~
"""

class Solution_1 {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        vector<int> output;
        int length = input.size();
        if(input.empty() || k <= 0 || k > length) return output;
        if(k == length) return input;
 
        int start = 0;
        int end = length-1;
        int p = Patition(input, start, end);
        while(p != (k-1)) {
            if(p < k -1) {
                start = p + 1;
                p = Patition(input, start, end);
            }
            else {
                end = p - 1;
                p = Patition(input, start, end);
            }
        }
         
        for(int i=0; i<k; ++i)
            output.push_back(input[i]);
        return output;
    }
 
    int Patition(vector<int>& input, int begin, int end) {
        int low = begin;
        int high = end;
        int pivot = input[low];
        while(low < high) {
            while(low<high && input[high] >= pivot)
                high--;
            input[low] = input[high];
            while(low<high && input[low] <= pivot)
                low++;
            input[high] = input[low];
        }
        input[low] = pivot;
        return low;
    }
};


class Solution {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        // 建k个元素的大顶堆，第>k个元素插入替换，调整大顶堆，返回堆中的全部元素
        int length = input.size();
        if(k<=0 || k>length || length<=0) return vector<int> ();
        if(k==length) return input;

        vector<int> result;
        for(int i=0; i<k; ++i)
            result.push_back(input[i]);
        buildHeap(result, k);
        for(int i=k; i<length; ++i) {
            insertHeap(result, input[i]);
        }

        return result;
    }

    void buildHeap(vector<int>& input, int length) {
        for(int i=length/2; i>=0; --i)
            adjustHeap(input, i);
    }

    void insertHeap(vector<int>& heap, int n) {
        if(n < heap[0]) {
            heap[0] = n;
            adjustHeap(heap, 0);
        }
    }

    void adjustHeap(vector<int>& input, int pos) {
        int length = input.size();
        while(true) {
            int child = pos * 2 + 1;
            if(child>=length) break;
            if((child+1<length) && (input[child]<input[child+1])) child++;
            if(input[pos] < input[child]) {
                swap(input[pos], input[child]);
                adjustHeap(input, child);
            }
            else break;
        }
    }

}
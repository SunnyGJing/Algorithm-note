"""
Creat time: 2019-12-21晚上
TimeToCode：
Last modified time: 

给定数字N，求第 N 个丑数。
丑数：因数只有2、3和5的数字，1是最小的丑数。

"""


class Solution {
public:
    vector<int> uglyn;
    int GetUglyNumber_Solution(int index) {
        // 如果用历数的方法找第N个丑数，复杂度太高了
        // 考虑空间换时间，建立哈希表存储按序排列的丑数
        // 怎么按序地在哈希表里加入元素呢，这是终点和难点。

        // 《剑指offer》中的方法非常巧妙，思路如下
        // 表中已有的数乘上2，记录大于表中已有的最大数字的最小乘积为M2
        // 表中已有的数乘上3，记录大于表中已有的最大数字的最小乘积为M3
        // 表中已有的数乘上5，记录大于表中已有的最大数字的最小乘积为M5
        // 其实，可以通过标记因子数字减少乘法次数来优化算法
        // 也就是说，与2相乘的乘积M2刚好大于表中最大数的因子数字的位置要缓存下来
        // 最后比较M2 M3和M5，取最小的加入到表中

        if (index <= 0) return false;
        
        uglyn.push_back(1);
        int posTwo = 0;
        int posThree = 0;
        int posFive = 0;

        while(uglyn.size() < index) {
            int lastN = uglyn.back();
            int mTwo = uglyn[posTwo] * 2;
            int mThree = uglyn[posThree] * 3;
            int mFive = uglyn[posFive] * 5;

            int curMin = min(mTwo, mThree);
            curMin = min(curMin, mFive);
            uglyn.push_back(curMin);

            while(uglyn[posTwo] * 2 <= uglyn.back())
                ++posTwo;
            while(uglyn[posThree] * 3 <= uglyn.back())
                ++posThree;
            while(uglyn[posFive] * 5 <= uglyn.back())
                ++posFive;
        }

        return uglyn[index-1];
    }
    
}
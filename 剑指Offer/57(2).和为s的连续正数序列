"""
Creat time:
TimeToCode：
Last modified time: 

给定一个整数s，找出所有和为s的连续的整数序列（至少含有两个数）
例如，输入15，由于1+2+3+4+5 = 4+5+6 = 7+8 = 15, 所以返回1~5，4~6，7~8三个序列

"""

class Solution_1 {
    // 还是求和为s的数字，所以可以借鉴上一个题目的解决思路
    
    // 思路：
    // 两个元素的和就初始化两个指针，那么三个元素的和就初始化三个指针，以此类推
    // 直到初始化时的求得的和已经大于s，就停止指针数的增长

    // 做法：
    // 记指针数量为n，初始化n为2，逐渐递增
    // 计算n个指针指向的元素的和，记为m
    // 如果初始化时的m大于s，就终止递增
    // 如果m小于s，就把这n个指针后移一位
    // 如果m等于s，就把这n个指针指向的元素存起来
    // 如果m大于s，继续递增指针数量

public:
    vector<vector<int> > FindContinuousSequence(int sum) {
        vector<vector<int> > result;
        if(sum < 3) return result;
        if(sum == 3)
            result.push_back(vector<int> {1,2});

        int n = 2;
        int initSum = 3;
        while(initSum <= sum) {
            int startValue = 2;
            int m = initSum;
            
            while(m <= sum){
                // int m = 0;
                // for(int value=startValue; value<startValue + n; ++value)
                //    m += value;

                // 这是上面注释掉的三行代码的优化，用了一个小技巧
                // 因为每次计算所有元素的和值，等于(前一次的和值) - (头指针指向的元素的前一个元素)
                // + (末尾指针指向的元素)，也就是等于(指针数量)
                // 所以无需每次都用循环计算连续序列的和值，可以利用前一次的和值
                m += n;

                if(m == sum) {
                    vector<int> tmp;
                    for(int value=startValue; value<startValue + n; ++value)
                        tmp.push_back(value);
                    result.push_back(tmp);
                    break;
                }

                ++startValue;
            }

            ++n;
            initSum = 0;
            for(int value=1; value<=n; ++value)
                initSum += value;
        }

        return result;
    }
};


class Solution_2 {
    // 剑指offer中的解法也比较有意思，记录一下
    // 思路：
    // 设定两个指针用来标记正数序列的开始和结束
    // 如果和大于sum，就增加small指针
    // 如果和小于sum，就增加big指针
    // 如果和等于sum，就记录结果，并且增加big指针以进行下一轮查找

    // PS:因为至少有两个数，所以small指针的上界是(1+sum)/2;

public:
    vector<vector<int> > FindContinuousSequence(int sum) {
        vector<vector<int> > result;
        if(sum < 3) return result;

        int small = 1, big = 2;
        int middle = (1 + sum) / 2;
        int curSum = small + big;

        while(small < middle) {
            if(curSum == sum)
                InsertContinuousSequence(result, small, big);
            
            while(curSum > sum && small < middle) {
                curSum -= small;
                ++small;

                if(curSum == sum)
                    InsertContinuousSequence(result, small, big);
            }

            ++big;
            curSum += big;
        }

        return result;
    }

    void InsertContinuousSequence(vector<vector<int> >& result, int small, int big) {
        vector<int> tmp;
        for(int value=small; value<=big; ++value)
            tmp.push_back(value);
        result.push_back(tmp);
    }
};